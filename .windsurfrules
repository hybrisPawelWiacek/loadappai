# LoadApp.AI Workspace Rules

## 1. Document Reference Guide
- When implementing features or user flows → prd20.md
- When designing component interaction or API endpoints → System_Architecture.md
- When implementing entities, services, or business logic → Domain_Entities_and_Services.md
- When creating or modifying API endpoints → API_Specification.md
- When adding extension points or metadata fields → future-extensibility-requirements.md
- When naming fields or documenting code → Glossary.md

## 2. Core Development Principles
- Follow clean architecture from System_Architecture.md
- Implement domain model as specified in Domain_Entities_and_Services.md
- Use REST API patterns from API_Specification.md
- Include extension points from future-extensibility-requirements.md
- Maintain consistent naming from Glossary.md

## 3. Implementation Focus
- Primary reference for features: prd20.md
  - Route planning with empty driving
  - Cost calculations 
  - Offer generation
  - Streamlit UI implementation
  
- Technical structure: System_Architecture.md
  - Frontend (Streamlit)
  - Backend (Flask)
  - Database (SQLite)
  - External services integration

## 4. Code Organization
- Follow domain patterns: Domain_Entities_and_Services.md
  - Entity definitions and validation
  - Service layer implementation
  - Business logic organization
  
- Follow API design: API_Specification.md
  - Endpoint structure
  - Request/response formats
  - Error handling
  - Status codes

## 5. Future-Proofing
Reference future-extensibility-requirements.md for:
- JSON metadata fields
- Feature flags
- Extension points
- Database schema evolution

## 6. Documentation & Naming
Use Glossary.md for:
- Field definitions
- Terminology
- Data types
- Validation rules

## 7. Implementation Process
Reference Implementation_Analysis.md for:
- Project phasing
- Dependencies
- Integration points
- Testing strategy

## 8. Checklist to prevent common mistakes
Here's a checklist of best practices to prevent such mistakes:

Before Creating Files:
Search for existing implementations using find_by_name
Check project structure using list_dir
Review related files using related_files
Verify correct directory using project conventions
Project Structure Rules:
Domain code goes in src/domain/
API endpoints in src/api/
Infrastructure code in src/infrastructure/
Frontend code in src/frontend/
File Organization Guidelines:
Keep related code in single files when possible
Follow the established module structure
Use init.py for package organization
Place tests in corresponding test directories
Before Implementation:
Review existing implementations
Check for duplicate functionality
Follow the project's architectural patterns
Verify the correct location based on clean architecture


## 9. Testing Best Practices
- Always run tests with `pytest [test_file] -v` command
- Do not use `python -m pytest` or other variations
- Before modifying code:
  1. Run tests to get baseline
  2. Understand what tests are failing and why
  3. Make changes to both implementation and tests in sync
- When tests fail:
  1. Check if failure is due to:
     - Implementation changes (update tests)
     - Test environment setup (fix mocks/fixtures)
     - Actual bugs (fix implementation)
  2. Update both implementation and tests together
  3. Verify all test cases still make sense
- Maintain test coverage above 60%
- Keep test fixtures up to date with implementation